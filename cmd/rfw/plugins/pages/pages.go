package pages

import (
	"encoding/json"
	"io/fs"
	"os"
	"path/filepath"
	"strings"

	"github.com/rfwlab/rfw/cmd/rfw/plugins"
	"github.com/rfwlab/rfw/v1/core"
)

type plugin struct {
	dir  string
	file string
}

func init() { plugins.Register(&plugin{}) }

func (p *plugin) Name() string { return "pages" }

func (p *plugin) Install(a *core.App) {}

func (p *plugin) Priority() int { return 0 }

func (p *plugin) PreBuild(raw json.RawMessage) error {
	cfg := struct {
		Dir string `json:"dir"`
	}{Dir: "pages"}
	if len(raw) > 0 {
		_ = json.Unmarshal(raw, &cfg)
	}
	p.dir = cfg.Dir
	routes := []struct{ Path, Comp string }{}
	err := filepath.WalkDir(p.dir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if d.IsDir() {
			return nil
		}
		if filepath.Ext(path) != ".go" || strings.HasSuffix(d.Name(), "_test.go") || strings.HasSuffix(d.Name(), "_gen.go") {
			return nil
		}
		rel, err := filepath.Rel(p.dir, path)
		if err != nil {
			return err
		}
		r, c := deriveRoute(rel)
		routes = append(routes, struct{ Path, Comp string }{r, c})
		return nil
	})
	if err != nil {
		return err
	}
	if len(routes) == 0 {
		return nil
	}
	var b strings.Builder
	b.WriteString("// Code generated by pages plugin. DO NOT EDIT.\n")
	b.WriteString("package pages\n\n")
	b.WriteString("import \"github.com/rfwlab/rfw/v1/router\"\n\n")
	b.WriteString("func init() {\n")
	for _, r := range routes {
		b.WriteString("\trouter.RegisterRoute(router.Route{Path: \"" + r.Path + "\", Component: " + r.Comp + "})\n")
	}
	b.WriteString("}\n")
	p.file = filepath.Join(p.dir, "routes_gen.go")
	return os.WriteFile(p.file, []byte(b.String()), 0o644)
}

func (p *plugin) Build(raw json.RawMessage) error { return nil }

func (p *plugin) PostBuild(raw json.RawMessage) error {
	if p.file != "" {
		_ = os.Remove(p.file)
	}
	return nil
}

func (p *plugin) ShouldRebuild(path string) bool {
	if !strings.HasPrefix(path, p.dir) {
		return false
	}
	return !strings.HasSuffix(path, "_gen.go")
}

func deriveRoute(rel string) (string, string) {
	rel = strings.TrimSuffix(rel, ".go")
	segments := strings.Split(rel, string(filepath.Separator))
	pathSegs := []string{}
	nameSegs := []string{}
	for i, s := range segments {
		isLast := i == len(segments)-1
		if isLast && s == "index" {
			nameSegs = append(nameSegs, "Index")
			continue
		}
		if strings.HasPrefix(s, "[") && strings.HasSuffix(s, "]") {
			param := s[1 : len(s)-1]
			pathSegs = append(pathSegs, ":"+param)
			nameSegs = append(nameSegs, toPascal(param))
		} else {
			pathSegs = append(pathSegs, s)
			nameSegs = append(nameSegs, toPascal(s))
		}
	}
	path := "/" + strings.Join(pathSegs, "/")
	if len(pathSegs) == 0 {
		path = "/"
	}
	comp := strings.Join(nameSegs, "")
	return path, comp
}

func toPascal(s string) string {
	s = strings.ReplaceAll(s, "-", " ")
	s = strings.ReplaceAll(s, "_", " ")
	parts := strings.Fields(s)
	for i, p := range parts {
		parts[i] = strings.ToUpper(p[:1]) + strings.ToLower(p[1:])
	}
	return strings.Join(parts, "")
}
