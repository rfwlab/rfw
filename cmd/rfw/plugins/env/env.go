package env

import (
	"encoding/json"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/rfwlab/rfw/cmd/rfw/plugins"
	"github.com/rfwlab/rfw/v1/core"
)

type plugin struct {
	dir string
}

func init() { plugins.Register(&plugin{}) }

func (p *plugin) Name() string { return "env" }

func (p *plugin) Install(a *core.App) {}

func (p *plugin) Priority() int { return 0 }

// PreBuild collects environment variables prefixed with RFW_ and generates a
// temporary rfwenv package exposing them through Get.
func (p *plugin) PreBuild(raw json.RawMessage) error {
	vars := map[string]string{}
	for _, e := range os.Environ() {
		if !strings.HasPrefix(e, "RFW_") {
			continue
		}
		parts := strings.SplitN(e, "=", 2)
		if len(parts) != 2 {
			continue
		}
		key := strings.TrimPrefix(parts[0], "RFW_")
		vars[key] = parts[1]
	}

	p.dir = "rfwenv"
	if err := os.MkdirAll(p.dir, 0o755); err != nil {
		return err
	}

	keys := make([]string, 0, len(vars))
	for k := range vars {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	var b strings.Builder
	b.WriteString("// Code generated by env plugin. DO NOT EDIT.\n")
	b.WriteString("package rfwenv\n\n")
	b.WriteString("var vars = map[string]string{\n")
	for _, k := range keys {
		b.WriteString("\t\"" + k + "\": \"" + vars[k] + "\",\n")
	}
	b.WriteString("}\n\n")
	b.WriteString("func Get(key string) string {\n\treturn vars[key]\n}\n")

	return os.WriteFile(filepath.Join(p.dir, "rfwenv.go"), []byte(b.String()), 0o644)
}

func (p *plugin) Build(raw json.RawMessage) error { return nil }

// PostBuild removes the temporary rfwenv package.
func (p *plugin) PostBuild(raw json.RawMessage) error {
	if p.dir != "" {
		_ = os.RemoveAll(p.dir)
		p.dir = ""
	}
	return nil
}

func (p *plugin) ShouldRebuild(path string) bool { return false }
